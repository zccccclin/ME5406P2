import os
import sys
from ppo import PPO_Agent
sys.path.append("../environment")
from reacher_env import ReacherEnv
env = ReacherEnv(render=False, moving_goal=False, train=True, tolerance=0.02)
agent = PPO_Agent(env)
agent.learn(100000) 

def main():
    env = ReacherEnv(render=False, moving_goal=False, train=True, tolerance=0.02)
    agent = PPO_Agent(env)
    agent.learn(100000)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--seed', type=int, default=1)
    parser.add_argument('--moving_goal', action='store_true')
    parser.add_argument('--random_start', action='store_true')
    parser.add_argument('--test_case_num', type=int, default=50)
    parser.add_argument('--num_iters', type=int, default=50000)
    parser.add_argument('--save_interval', type=int, default=200)
    parser.add_argument('--log_interval', type=int, default=1)
    parser.add_argument('--rollout_steps', type=int, default=200)
    parser.add_argument('--batch_size', type=int, default=200)
    parser.add_argument('--train_steps', type=int, default=100)
    parser.add_argument('--hid1_dim', type=int, default=128)
    parser.add_argument('--hid2_dim', type=int, default=256)
    parser.add_argument('--hid3_dim', type=int, default=256)
    parser.add_argument('--actor_lr', type=float, default=0.0001)
    parser.add_argument('--critic_lr', type=float, default=0.001)
    parser.add_argument('--critic_weight_decay', type=float, default=0.001)
    parser.add_argument('--use_her', action='store_true')
    parser.add_argument('--k_future', type=int, default=4)
    parser.add_argument('--tau', type=float, default=0.001)
    parser.add_argument('--reward_scale', type=float, default=1)
    parser.add_argument('--ou_noise_std', type=float, default=0.2)
    parser.add_argument('--uniform_noise_high', type=float, default=0.5)
    parser.add_argument('--uniform_noise_low', type=float, default=-0.)
    parser.add_argument('--max_noise_dec_step', type=float, default=0.000)
    parser.add_argument('--dist_tol', type=float, default=0.02)
    parser.add_argument('--ori_tol', type=float, default=0.1)
    parser.add_argument('--random_prob', type=float, default=0.1)
    parser.add_argument('--normal_noise_std', type=float, default=0.1)
    parser.add_argument('--noise_type', default='uniform', choices=['uniform', 'ou_noise', 'gaussian'], type=str)
    parser.add_argument('--memory_limit', type=int, default=1e6)
    parser.add_argument('--gamma', type=float, default=0.99)
    parser.add_argument('--ob_norm', type=bool, default=False)
    parser.add_argument('--init_method', default='uniform', choices=['uniform', 'normal'], type=str)
    parser.add_argument('--max_grad_norm', type=float, default=None)
    parser.add_argument('--save_dir', type=str, default='./data')
    parser.add_argument('--test', action='store_true')
    parser.add_argument('--resume', '-rt', action='store_true')
    parser.add_argument('--load_dir', type=str, default=None)
    parser.add_argument('--resume_step', '-rs', type=int, default=None)
    parser.add_argument('--render', action='store_true')
    parser.add_argument('--gpu_id', default='0', type=str)
    args = parser.parse_args()
    os.environ['CUDA_VISIBLE_DEVICES'] = args.gpu_id
    main()